/**
 * 
 */

/**
 * @author yo
 *
 */
public class GestionCuentas {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Cuentacorriente[] cuentas;
		cuentas = new Cuentacorriente[20];
		String cliente;
		Double saldo;
		/*
		 * Leer.mensaje(cuentas.toString()); for (int i=0; i<cuentas.length;
		 * i++){ Leer.mensaje(""+cuentas[i]); //
		 * Leer.mensaje(cuentas[i].visualiza()); //
		 * Leer.mensaje(cuentas[i].toString()); }
		 */ for (int i = 0; i < 2; i++) {
			cliente = Leer.pedirCadena("Nombre del cliente ");
			saldo = Leer.pedirDecimal("Saldo inicial ");
			cuentas[i] = new Cuentacorriente(saldo, cliente);
		}
		// Leer.mensaje(cuentas.toString());
		for (int i = 0; i < cuentas.length; i++) {
			if (i < Cuentacorriente.getSiguiente() - 1) {
				Leer.mensaje(cuentas[i].visualiza());
			}
		}
		// Menu
		int opcion;
		do {
			Leer.mensaje(" 1.- Crear cuenta");
			Leer.mensaje(" 2.- Visualizar las cuentas");
			Leer.mensaje(" 3.- Ingresar en una cuenta");
			Leer.mensaje(" 4.- Sacar de una cuenta");
			Leer.mensaje(" 5.- Visualizar numero de cuentas existentes");
			Leer.mensaje(" 6.- Cerrar cuenta");
			Leer.mensaje(" 7.- Fusionar 2 cuentas");
			Leer.mensaje(" 0.- Fin");

			opcion = Leer.pedirEntero("Elija opci�n ");
			Double importe = -1.0;
			String cuenta;
			Boolean existe = false, saldosuf;
			switch (opcion) {
			case 1:// Crear cuenta
				if (Cuentacorriente.getSiguiente() == 11) {
					Leer.mensaje("L�mite de cuentas alcanzado");
				} else {
					cliente = Leer.pedirCadena("Nombre del cliente ");
					saldo = Leer.pedirDecimal("Saldo inicial ");
					cuentas[Cuentacorriente.getSiguiente() - 1] = new Cuentacorriente(saldo, cliente);
				}
				break;
			case 2:// visualizar cuentas
				for (int i = 0; i < cuentas.length; i++) {
					if (cuentas[i] != null) {
						Leer.mensaje(cuentas[i].visualiza());
					}
				}
				break;
			case 3:// ingresar en cuenta
				while (importe < 0) {
					importe = Leer.pedirDecimal("Teclee importe a ingresar (mayor que cero: ");
				}
				cuenta = Leer.pedirCadena("C�digo de cuenta en la que ingresar");
				for (int i = 0; i < Cuentacorriente.getSiguiente() - 1; i++) {
					if (cuentas[i].getNumero().equals(cuenta)) {
						cuentas[i].ingresarEfectivo(importe);
						existe = true;
					}
				}
				if (!existe) {
					Leer.mensaje("Cuenta no existente " + cuenta);
				}
				break;
			case 4:// sacar de cuenta
				while (importe < 0) {
					importe = Leer.pedirDecimal("Teclee importe a retirar (mayor que cero: ");
				}
				cuenta = Leer.pedirCadena("C�digo de cuenta en la que ingresar");
				for (int i = 0; i < Cuentacorriente.getSiguiente() - 1; i++) {
					if (cuentas[i].getNumero().equals(cuenta)) {
						saldosuf = cuentas[i].retirarEfectivo(importe);
						if (!saldosuf) {
							Leer.mensaje("No hay saldo suficiente");
						}
						existe = true;
					}
				}
				if (!existe) {
					Leer.mensaje("Cuenta no existente " + cuenta);
				}
				break;
			case 5:// Visualizar cuentas existentes
				if (Cuentacorriente.getNumCuentas() > 1) {
					Leer.mensaje(cuentas[0].Visualizacion());
				} else {
					Leer.mensaje("Cuentas insuficientes, por favor cree mas cuentas");
				}
				break;
			case 6:
				cuenta = Leer.pedirCadena("Codigo de cuenta que desea borrar");
				for (int i = 0; i < Cuentacorriente.getSiguiente() - 1; i++) {
					if (cuentas[i].getNumero().equals(cuenta)) {
						cuentas[i].cerrarCuentas();
						Leer.mensaje("Se ha eliminado la cuenta " + cuenta);
						existe = true;
					}
				}
				if (!existe) {
					Leer.mensaje("Cuenta no existente " + cuenta);
				}

				break;
			case 7:
				String cuenta1 = Leer.pedirCadena("Cual es la primera cuenta que desea fusionar?");
				int i, j;
				for (i = 0; i < Cuentacorriente.getSiguiente() - 1; i++) {
					if (cuentas[i].getNumero().equals(cuenta1)) {
						existe = true;
						break;
					}	
				}
				
				if ((!existe)||cuentas[i].getCliente().equals("CERRADA")) {
					Leer.mensaje("La cuenta " + cuenta1 + " no existe o esta CERRADA ");
					break;
				}
				String cuenta2 = Leer.pedirCadena("Con que cuenta desea fusionar la anterior?");
				for (j = 0; j < Cuentacorriente.getSiguiente() - 1; j++) {
					if (cuentas[j].getNumero().equals(cuenta2)) {
						existe = true;
						break;
					}
				}
				if ((!existe)||cuentas[j].getCliente().equals("CERRADA")) {
					Leer.mensaje("La cuenta " + cuenta1 + " no existe o esta CERRADA ");
					break;
				}
				if (cuenta1.equals(cuenta2)) {
					Leer.mensaje(
							"No se puede fusionar una cuenta consigo misma, porfavor introduzca dos numero de cuentas diferentes");
					break;
				}
				if (!cuentas[i].getCliente().equals(cuentas[j].getCliente())) {
					Leer.mensaje("Para poder fusionar dos ceuntas, estan deben tener al mismo cliente");
					break;
				}
				Leer.mensaje("Se ha fusionado la cuenta "+cuentas[i].getNumero()+" con la cuenta "+cuentas[j].getNumero()+", cuyo propietario es "+cuentas[i].getCliente());
				cuentas[Cuentacorriente.getSiguiente() - 1] = new Cuentacorriente((cuentas[i].getSaldo()+cuentas[j].getSaldo()), cuentas[i].getCliente());
				cuentas[i].cerrarCuentas();
				cuentas[j].cerrarCuentas();
				
				
				break;
			}
		} while (opcion != 0);
	}
}
